// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: authpost.proto

package authpost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthenticateAndPost_CheckUserAuthentication_FullMethodName = "/authpost.AuthenticateAndPost/CheckUserAuthentication"
	AuthenticateAndPost_CreateUser_FullMethodName              = "/authpost.AuthenticateAndPost/CreateUser"
	AuthenticateAndPost_EditUser_FullMethodName                = "/authpost.AuthenticateAndPost/EditUser"
	AuthenticateAndPost_GetUserFollower_FullMethodName         = "/authpost.AuthenticateAndPost/GetUserFollower"
	AuthenticateAndPost_FollowUser_FullMethodName              = "/authpost.AuthenticateAndPost/FollowUser"
	AuthenticateAndPost_UnfollowUser_FullMethodName            = "/authpost.AuthenticateAndPost/UnfollowUser"
	AuthenticateAndPost_GetUserPost_FullMethodName             = "/authpost.AuthenticateAndPost/GetUserPost"
	AuthenticateAndPost_CreatePost_FullMethodName              = "/authpost.AuthenticateAndPost/CreatePost"
	AuthenticateAndPost_GetPost_FullMethodName                 = "/authpost.AuthenticateAndPost/GetPost"
	AuthenticateAndPost_EditPost_FullMethodName                = "/authpost.AuthenticateAndPost/EditPost"
	AuthenticateAndPost_DeletePost_FullMethodName              = "/authpost.AuthenticateAndPost/DeletePost"
	AuthenticateAndPost_CommentPost_FullMethodName             = "/authpost.AuthenticateAndPost/CommentPost"
	AuthenticateAndPost_LikePost_FullMethodName                = "/authpost.AuthenticateAndPost/LikePost"
)

// AuthenticateAndPostClient is the client API for AuthenticateAndPost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticateAndPostClient interface {
	// Group: users
	CheckUserAuthentication(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserResult, error)
	CreateUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error)
	EditUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error)
	// Group: friends
	GetUserFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserFollowerInfo, error)
	FollowUser(ctx context.Context, in *UserAndFollowerInfo, opts ...grpc.CallOption) (*ActionResult, error)
	UnfollowUser(ctx context.Context, in *UserAndFollowerInfo, opts ...grpc.CallOption) (*ActionResult, error)
	GetUserPost(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserPostDetailInfo, error)
	// Group: posts
	CreatePost(ctx context.Context, in *PostDetailInfo, opts ...grpc.CallOption) (*ActionResult, error)
	GetPost(ctx context.Context, in *PostInfo, opts ...grpc.CallOption) (*PostDetailInfo, error)
	EditPost(ctx context.Context, in *PostDetailInfo, opts ...grpc.CallOption) (*ActionResult, error)
	DeletePost(ctx context.Context, in *PostInfo, opts ...grpc.CallOption) (*ActionResult, error)
	CommentPost(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*ActionResult, error)
	LikePost(ctx context.Context, in *LikeInfo, opts ...grpc.CallOption) (*ActionResult, error)
}

type authenticateAndPostClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticateAndPostClient(cc grpc.ClientConnInterface) AuthenticateAndPostClient {
	return &authenticateAndPostClient{cc}
}

func (c *authenticateAndPostClient) CheckUserAuthentication(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CheckUserAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CreateUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) EditUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_EditUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetUserFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserFollowerInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFollowerInfo)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetUserFollower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) FollowUser(ctx context.Context, in *UserAndFollowerInfo, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) UnfollowUser(ctx context.Context, in *UserAndFollowerInfo, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_UnfollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetUserPost(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserPostDetailInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPostDetailInfo)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetUserPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CreatePost(ctx context.Context, in *PostDetailInfo, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetPost(ctx context.Context, in *PostInfo, opts ...grpc.CallOption) (*PostDetailInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDetailInfo)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_GetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) EditPost(ctx context.Context, in *PostDetailInfo, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_EditPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) DeletePost(ctx context.Context, in *PostInfo, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CommentPost(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_CommentPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) LikePost(ctx context.Context, in *LikeInfo, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, AuthenticateAndPost_LikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticateAndPostServer is the server API for AuthenticateAndPost service.
// All implementations must embed UnimplementedAuthenticateAndPostServer
// for forward compatibility.
type AuthenticateAndPostServer interface {
	// Group: users
	CheckUserAuthentication(context.Context, *UserInfo) (*UserResult, error)
	CreateUser(context.Context, *UserDetailInfo) (*UserResult, error)
	EditUser(context.Context, *UserDetailInfo) (*UserResult, error)
	// Group: friends
	GetUserFollower(context.Context, *UserInfo) (*UserFollowerInfo, error)
	FollowUser(context.Context, *UserAndFollowerInfo) (*ActionResult, error)
	UnfollowUser(context.Context, *UserAndFollowerInfo) (*ActionResult, error)
	GetUserPost(context.Context, *UserInfo) (*UserPostDetailInfo, error)
	// Group: posts
	CreatePost(context.Context, *PostDetailInfo) (*ActionResult, error)
	GetPost(context.Context, *PostInfo) (*PostDetailInfo, error)
	EditPost(context.Context, *PostDetailInfo) (*ActionResult, error)
	DeletePost(context.Context, *PostInfo) (*ActionResult, error)
	CommentPost(context.Context, *CommentInfo) (*ActionResult, error)
	LikePost(context.Context, *LikeInfo) (*ActionResult, error)
	mustEmbedUnimplementedAuthenticateAndPostServer()
}

// UnimplementedAuthenticateAndPostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthenticateAndPostServer struct{}

func (UnimplementedAuthenticateAndPostServer) CheckUserAuthentication(context.Context, *UserInfo) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAuthentication not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CreateUser(context.Context, *UserDetailInfo) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) EditUser(context.Context, *UserDetailInfo) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetUserFollower(context.Context, *UserInfo) (*UserFollowerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollower not implemented")
}
func (UnimplementedAuthenticateAndPostServer) FollowUser(context.Context, *UserAndFollowerInfo) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) UnfollowUser(context.Context, *UserAndFollowerInfo) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetUserPost(context.Context, *UserInfo) (*UserPostDetailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CreatePost(context.Context, *PostDetailInfo) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetPost(context.Context, *PostInfo) (*PostDetailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) EditPost(context.Context, *PostDetailInfo) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) DeletePost(context.Context, *PostInfo) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CommentPost(context.Context, *CommentInfo) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) LikePost(context.Context, *LikeInfo) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) mustEmbedUnimplementedAuthenticateAndPostServer() {}
func (UnimplementedAuthenticateAndPostServer) testEmbeddedByValue()                             {}

// UnsafeAuthenticateAndPostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticateAndPostServer will
// result in compilation errors.
type UnsafeAuthenticateAndPostServer interface {
	mustEmbedUnimplementedAuthenticateAndPostServer()
}

func RegisterAuthenticateAndPostServer(s grpc.ServiceRegistrar, srv AuthenticateAndPostServer) {
	// If the following call pancis, it indicates UnimplementedAuthenticateAndPostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthenticateAndPost_ServiceDesc, srv)
}

func _AuthenticateAndPost_CheckUserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CheckUserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CheckUserAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CheckUserAuthentication(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CreateUser(ctx, req.(*UserDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_EditUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).EditUser(ctx, req.(*UserDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetUserFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetUserFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetUserFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetUserFollower(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndFollowerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).FollowUser(ctx, req.(*UserAndFollowerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndFollowerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).UnfollowUser(ctx, req.(*UserAndFollowerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetUserPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetUserPost(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CreatePost(ctx, req.(*PostDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetPost(ctx, req.(*PostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_EditPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).EditPost(ctx, req.(*PostDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).DeletePost(ctx, req.(*PostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_CommentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CommentPost(ctx, req.(*CommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticateAndPost_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).LikePost(ctx, req.(*LikeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticateAndPost_ServiceDesc is the grpc.ServiceDesc for AuthenticateAndPost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticateAndPost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authpost.AuthenticateAndPost",
	HandlerType: (*AuthenticateAndPostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserAuthentication",
			Handler:    _AuthenticateAndPost_CheckUserAuthentication_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthenticateAndPost_CreateUser_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _AuthenticateAndPost_EditUser_Handler,
		},
		{
			MethodName: "GetUserFollower",
			Handler:    _AuthenticateAndPost_GetUserFollower_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _AuthenticateAndPost_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _AuthenticateAndPost_UnfollowUser_Handler,
		},
		{
			MethodName: "GetUserPost",
			Handler:    _AuthenticateAndPost_GetUserPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _AuthenticateAndPost_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _AuthenticateAndPost_GetPost_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _AuthenticateAndPost_EditPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _AuthenticateAndPost_DeletePost_Handler,
		},
		{
			MethodName: "CommentPost",
			Handler:    _AuthenticateAndPost_CommentPost_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _AuthenticateAndPost_LikePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authpost.proto",
}
