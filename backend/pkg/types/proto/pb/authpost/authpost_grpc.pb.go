// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: authpost.proto

package authpost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthenticationAndPost_CheckUserAuthentication_FullMethodName = "/authpost.AuthenticationAndPost/CheckUserAuthentication"
	AuthenticationAndPost_CreateUser_FullMethodName              = "/authpost.AuthenticationAndPost/CreateUser"
	AuthenticationAndPost_EditUser_FullMethodName                = "/authpost.AuthenticationAndPost/EditUser"
	AuthenticationAndPost_GetUserFollower_FullMethodName         = "/authpost.AuthenticationAndPost/GetUserFollower"
	AuthenticationAndPost_GetPostDetail_FullMethodName           = "/authpost.AuthenticationAndPost/GetPostDetail"
)

// AuthenticationAndPostClient is the client API for AuthenticationAndPost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationAndPostClient interface {
	CheckUserAuthentication(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserResult, error)
	CreateUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error)
	EditUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error)
	GetUserFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserFollower, error)
	GetPostDetail(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error)
}

type authenticationAndPostClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationAndPostClient(cc grpc.ClientConnInterface) AuthenticationAndPostClient {
	return &authenticationAndPostClient{cc}
}

func (c *authenticationAndPostClient) CheckUserAuthentication(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResult)
	err := c.cc.Invoke(ctx, AuthenticationAndPost_CheckUserAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationAndPostClient) CreateUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResult)
	err := c.cc.Invoke(ctx, AuthenticationAndPost_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationAndPostClient) EditUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResult)
	err := c.cc.Invoke(ctx, AuthenticationAndPost_EditUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationAndPostClient) GetUserFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserFollower, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFollower)
	err := c.cc.Invoke(ctx, AuthenticationAndPost_GetUserFollower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationAndPostClient) GetPostDetail(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Post)
	err := c.cc.Invoke(ctx, AuthenticationAndPost_GetPostDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationAndPostServer is the server API for AuthenticationAndPost service.
// All implementations must embed UnimplementedAuthenticationAndPostServer
// for forward compatibility.
type AuthenticationAndPostServer interface {
	CheckUserAuthentication(context.Context, *UserInfo) (*UserResult, error)
	CreateUser(context.Context, *UserDetailInfo) (*UserResult, error)
	EditUser(context.Context, *UserDetailInfo) (*UserResult, error)
	GetUserFollower(context.Context, *UserInfo) (*UserFollower, error)
	GetPostDetail(context.Context, *GetPostRequest) (*Post, error)
	mustEmbedUnimplementedAuthenticationAndPostServer()
}

// UnimplementedAuthenticationAndPostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthenticationAndPostServer struct{}

func (UnimplementedAuthenticationAndPostServer) CheckUserAuthentication(context.Context, *UserInfo) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAuthentication not implemented")
}
func (UnimplementedAuthenticationAndPostServer) CreateUser(context.Context, *UserDetailInfo) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthenticationAndPostServer) EditUser(context.Context, *UserDetailInfo) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedAuthenticationAndPostServer) GetUserFollower(context.Context, *UserInfo) (*UserFollower, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollower not implemented")
}
func (UnimplementedAuthenticationAndPostServer) GetPostDetail(context.Context, *GetPostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostDetail not implemented")
}
func (UnimplementedAuthenticationAndPostServer) mustEmbedUnimplementedAuthenticationAndPostServer() {}
func (UnimplementedAuthenticationAndPostServer) testEmbeddedByValue()                               {}

// UnsafeAuthenticationAndPostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationAndPostServer will
// result in compilation errors.
type UnsafeAuthenticationAndPostServer interface {
	mustEmbedUnimplementedAuthenticationAndPostServer()
}

func RegisterAuthenticationAndPostServer(s grpc.ServiceRegistrar, srv AuthenticationAndPostServer) {
	// If the following call pancis, it indicates UnimplementedAuthenticationAndPostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthenticationAndPost_ServiceDesc, srv)
}

func _AuthenticationAndPost_CheckUserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationAndPostServer).CheckUserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationAndPost_CheckUserAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationAndPostServer).CheckUserAuthentication(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationAndPost_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationAndPostServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationAndPost_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationAndPostServer).CreateUser(ctx, req.(*UserDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationAndPost_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationAndPostServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationAndPost_EditUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationAndPostServer).EditUser(ctx, req.(*UserDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationAndPost_GetUserFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationAndPostServer).GetUserFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationAndPost_GetUserFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationAndPostServer).GetUserFollower(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationAndPost_GetPostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationAndPostServer).GetPostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationAndPost_GetPostDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationAndPostServer).GetPostDetail(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationAndPost_ServiceDesc is the grpc.ServiceDesc for AuthenticationAndPost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationAndPost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authpost.AuthenticationAndPost",
	HandlerType: (*AuthenticationAndPostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserAuthentication",
			Handler:    _AuthenticationAndPost_CheckUserAuthentication_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthenticationAndPost_CreateUser_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _AuthenticationAndPost_EditUser_Handler,
		},
		{
			MethodName: "GetUserFollower",
			Handler:    _AuthenticationAndPost_GetUserFollower_Handler,
		},
		{
			MethodName: "GetPostDetail",
			Handler:    _AuthenticationAndPost_GetPostDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authpost.proto",
}
